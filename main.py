import os
import time
import ccxt
import pandas as pd
import ta
import requests
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
TESTNET = os.getenv("TESTNET", "False").lower() == "true"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

ORDER_SIZE_USDT = float(os.getenv("ORDER_SIZE_USDT", "5.0"))
LEVERAGE = int(os.getenv("LEVERAGE", "25"))
MAX_POSITIONS = int(os.getenv("MAX_POSITIONS", "5"))
TIMEFRAME = os.getenv("TIMEFRAME", "5m")
MIN_PROFIT_PERCENT = float(os.getenv("MIN_PROFIT_PERCENT", "0.5"))
MIN_BALANCE_USDT = float(os.getenv("MIN_BALANCE_USDT", "15.0"))
COOLDOWN_SECONDS = int(os.getenv("COOLDOWN_SECONDS", "120"))

if TIMEFRAME == "1m":
    ATR_WINDOW = 7
    RSI_WINDOW = 3
    HISTORY_LIMIT = 150
elif TIMEFRAME == "3m":
    ATR_WINDOW = 10
    RSI_WINDOW = 4
    HISTORY_LIMIT = 200
else:
    ATR_WINDOW = 14
    RSI_WINDOW = 5
    HISTORY_LIMIT = 250

pnl_stats = {
    "total_trades": 0,
    "winning_trades": 0,
    "losing_trades": 0,
    "total_pnl": 0.0,
    "biggest_win": 0.0,
    "biggest_loss": 0.0
}

last_entry_time = {}

exchange = ccxt.bybit({
    "apiKey": API_KEY,
    "secret": API_SECRET,
    "enableRateLimit": True,
})

if TESTNET:
    exchange.set_sandbox_mode(True)
    print("üî∏ TESTNET —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
else:
    print("üî¥ LIVE —Ä–µ–∂–∏–º - —Ä–µ–∞–ª—å–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è!")

def send_telegram(message):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        print(f"{now()} ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}")

def get_balance():
    try:
        balance = exchange.fetch_balance()
        usdt_balance = balance['USDT']['free'] if 'USDT' in balance else 0
        return float(usdt_balance)
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
        return 0

def now():
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

def fetch_ohlcv(symbol, limit=None):
    try:
        if limit is None:
            limit = HISTORY_LIMIT
        bars = exchange.fetch_ohlcv(symbol, timeframe=TIMEFRAME, limit=limit)
        df = pd.DataFrame(bars, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è OHLCV –¥–ª—è {symbol}: {e}")
        return None

def calculate_indicators(df):
    try:
        df['EMA9'] = ta.trend.ema_indicator(df['close'], window=9)
        df['EMA21'] = ta.trend.ema_indicator(df['close'], window=21)
        df['EMA200'] = ta.trend.ema_indicator(df['close'], window=200)
        df['RSI'] = ta.momentum.rsi(df['close'], window=RSI_WINDOW)
        atr = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=ATR_WINDOW)
        df['ATR'] = atr.average_true_range()
        df['volume_ema'] = df['volume'].ewm(span=20).mean()
        return df
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}")
        return None

def get_open_positions():
    try:
        positions = exchange.fetch_positions()
        open_pos = []
        for p in positions:
            contracts = float(p.get('contracts', 0))
            size = float(p.get('size', 0))
            position_amt = float(p.get('positionAmt', 0))
            
            actual_size = contracts or size or position_amt
            
            if abs(actual_size) > 0:
                open_pos.append(p)
        return open_pos
    except Exception as e:
        print(f"{now()} ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return []

def calculate_amount(price):
    return round((ORDER_SIZE_USDT * LEVERAGE) / price, 6)

def get_tick_size(symbol):
    try:
        market = exchange.market(symbol)
        if 'info' in market and 'priceFilter' in market['info']:
            tick_size = float(market['info']['priceFilter'].get('tickSize', 0.01))
            return tick_size
        if 'precision' in market and 'price' in market['precision']:
            decimals = market['precision']['price']
            return 10 ** (-decimals)
        return 0.01
    except:
        return 0.01

def round_to_tick(price, tick_size, round_up=True):
    if tick_size <= 0:
        tick_size = 0.01
    import math
    if round_up:
        return math.ceil(price / tick_size) * tick_size
    else:
        return math.floor(price / tick_size) * tick_size

def update_pnl_stats(pnl, trade_type="manual"):
    global pnl_stats
    pnl_stats["total_trades"] += 1
    pnl_stats["total_pnl"] += pnl
    
    if pnl > 0:
        pnl_stats["winning_trades"] += 1
        if pnl > pnl_stats["biggest_win"]:
            pnl_stats["biggest_win"] = pnl
    else:
        pnl_stats["losing_trades"] += 1
        if pnl < pnl_stats["biggest_loss"]:
            pnl_stats["biggest_loss"] = pnl
    
    winrate = (pnl_stats["winning_trades"] / pnl_stats["total_trades"] * 100) if pnl_stats["total_trades"] > 0 else 0
    print(f"{now()} üìä PnL: {pnl:+.2f} USDT | Total: {pnl_stats['total_pnl']:+.2f} USDT | Winrate: {winrate:.1f}% ({pnl_stats['winning_trades']}/{pnl_stats['total_trades']})")

def print_pnl_stats():
    if pnl_stats["total_trades"] == 0:
        return
    winrate = pnl_stats["winning_trades"] / pnl_stats["total_trades"] * 100
    msg = (
        f"\n{'='*60}\n"
        f"üìä PnL –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        f"{'='*60}\n"
        f"–í—Å—å–æ–≥–æ —É–≥–æ–¥: {pnl_stats['total_trades']}\n"
        f"–ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {pnl_stats['winning_trades']} | –ó–±–∏—Ç–∫–æ–≤–∏—Ö: {pnl_stats['losing_trades']}\n"
        f"Winrate: {winrate:.2f}%\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∏–π PnL: {pnl_stats['total_pnl']:+.2f} USDT\n"
        f"–ù–∞–π–±—ñ–ª—å—à–∏–π –ø—Ä–æ—Ñ—ñ—Ç: +{pnl_stats['biggest_win']:.2f} USDT\n"
        f"–ù–∞–π–±—ñ–ª—å—à–∏–π –∑–±–∏—Ç–æ–∫: {pnl_stats['biggest_loss']:.2f} USDT\n"
        f"{'='*60}\n"
    )
    print(msg)
    send_telegram(msg.replace('=', '‚îÄ'))

def close_position(symbol, side, reason="manual", entry_price=None):
    try:
        positions = exchange.fetch_positions([symbol])
        for pos in positions:
            contracts = float(pos.get('contracts', 0))
            size = float(pos.get('size', 0))
            position_amt = float(pos.get('positionAmt', 0))
            
            actual_size = contracts or size or position_amt
            
            if abs(actual_size) > 0:
                amount = abs(actual_size)
                close_side = 'sell' if side == "LONG" else 'buy'
                
                ticker = exchange.fetch_ticker(symbol)
                exit_price = float(ticker['last'])
                
                if entry_price:
                    if side == "LONG":
                        pnl = (exit_price - entry_price) / entry_price * 100 * ORDER_SIZE_USDT * LEVERAGE
                    else:
                        pnl = (entry_price - exit_price) / entry_price * 100 * ORDER_SIZE_USDT * LEVERAGE
                    update_pnl_stats(pnl)
                
                exchange.create_market_order(symbol, close_side, amount, {'reduceOnly': True})
                print(f"{now()} üîÑ –ü–æ–∑–∏—Ü—ñ—é {symbol} –∑–∞–∫—Ä–∏—Ç–æ | –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                send_telegram(f"üîÑ –ó–∞–∫—Ä–∏—Ç–æ {side} {symbol}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\nPnL: {pnl:+.2f} USDT" if entry_price else f"üîÑ –ó–∞–∫—Ä–∏—Ç–æ {side} {symbol}")
                return True
        return False
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
        return False

def exit_signal(df, side, symbol=""):
    try:
        last = df.iloc[-1]
        prev = df.iloc[-2]
        
        ema9 = last['EMA9']
        ema21 = last['EMA21']
        rsi = last['RSI']
        
        if pd.isna([ema9, ema21, rsi]).any():
            return False
        
        if side == "LONG":
            if ema9 < ema21:
                print(f"{now()} üî¥ {symbol} EXIT: EMA9 –ø–µ—Ä–µ—Ç–Ω—É–ª–∞ EMA21 –≤–Ω–∏–∑ (–±—É–ª–æ LONG)")
                return True
            if rsi < 30:
                print(f"{now()} üî¥ {symbol} EXIT: RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å {rsi:.1f} (–±—É–ª–æ LONG)")
                return True
        
        elif side == "SHORT":
            if ema9 > ema21:
                print(f"{now()} üü¢ {symbol} EXIT: EMA9 –ø–µ—Ä–µ—Ç–Ω—É–ª–∞ EMA21 –≤–≥–æ—Ä—É (–±—É–ª–æ SHORT)")
                return True
            if rsi > 70:
                print(f"{now()} üü¢ {symbol} EXIT: RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å {rsi:.1f} (–±—É–ª–æ SHORT)")
                return True
        
        return False
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ exit signal: {e}")
        return False

def open_position(symbol, side, atr):
    global last_entry_time
    
    current_time = time.time()
    if symbol in last_entry_time:
        time_since_last = current_time - last_entry_time[symbol]
        if time_since_last < COOLDOWN_SECONDS:
            remaining = COOLDOWN_SECONDS - time_since_last
            print(f"{now()} ‚è≥ {symbol} —É cooldown, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {remaining:.0f}—Å")
            return False
    
    order_opened = False
    try:
        market = exchange.market(symbol)
        ticker = exchange.fetch_ticker(symbol)
        price = float(ticker['last'])
        amount = calculate_amount(price)
        
        tick_size = get_tick_size(symbol)

        if pd.isna(atr) or atr <= 0:
            print(f"{now()} ‚ö†Ô∏è ATR –Ω–µ–¥—ñ–π—Å–Ω–∏–π –¥–ª—è {symbol}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
            tp_percent = MIN_PROFIT_PERCENT
            sl_percent = 0.3
        else:
            tp_percent_atr = atr / price * 100 * 3
            sl_percent_atr = atr / price * 100 * 1.5
            
            if pd.isna(tp_percent_atr):
                tp_percent = MIN_PROFIT_PERCENT
            else:
                tp_percent = max(MIN_PROFIT_PERCENT, tp_percent_atr)
            
            if pd.isna(sl_percent_atr):
                sl_percent = 0.3
            else:
                sl_percent = max(0.3, sl_percent_atr)

        tp_price_raw = price * (1 + tp_percent/100) if side == "LONG" else price * (1 - tp_percent/100)
        sl_price_raw = price * (1 - sl_percent/100) if side == "LONG" else price * (1 + sl_percent/100)
        
        if side == "LONG":
            tp_price = round_to_tick(tp_price_raw, tick_size, round_up=True)
            sl_price = round_to_tick(sl_price_raw, tick_size, round_up=False)
        else:
            tp_price = round_to_tick(tp_price_raw, tick_size, round_up=False)
            sl_price = round_to_tick(sl_price_raw, tick_size, round_up=True)

        exchange.set_leverage(LEVERAGE, symbol)
        
        order = exchange.create_market_order(
            symbol, 
            'buy' if side == "LONG" else 'sell', 
            amount
        )
        order_opened = True
        
        print(f"{now()} üìä –û—Ä–¥–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ: {side} {symbol}")
        print(f"    üí∞ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {price:.4f} USDT")
        print(f"    üìà Take Profit: {tp_price} USDT ({tp_percent:.2f}%)")
        print(f"    üìâ Stop Loss: {sl_price} USDT ({sl_percent:.2f}%)")

        bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
        
        params = {
            'category': 'linear',
            'symbol': bybit_symbol,
            'takeProfit': str(tp_price),
            'stopLoss': str(sl_price),
            'tpTriggerBy': 'LastPrice',
            'slTriggerBy': 'LastPrice',
            'positionIdx': 0
        }
        
        max_retries = 3
        tp_sl_success = False
        
        for attempt in range(max_retries):
            try:
                exchange.private_post_v5_position_trading_stop(params)
                print(f"{now()} ‚úÖ TP/SL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol}")
                tp_sl_success = True
                break
            except Exception as e:
                if attempt < max_retries - 1:
                    print(f"{now()} ‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –Ω–µ –≤–¥–∞–ª–∞—Å—è, –ø–æ–≤—Ç–æ—Ä...")
                    time.sleep(1)
                else:
                    print(f"{now()} ‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: TP/SL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
        
        if not tp_sl_success:
            print(f"{now()} üö® –£–í–ê–ì–ê: –ó–∞–∫—Ä–∏–≤–∞—é –ø–æ–∑–∏—Ü—ñ—é {symbol} —á–µ—Ä–µ–∑ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TP/SL")
            close_position(symbol, side, "TP/SL failed")
            send_telegram(f"‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó</b>\n\n"
                         f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
                         f"–ü—Ä–∏—á–∏–Ω–∞: TP/SL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
                         f"–ü–æ–∑–∏—Ü—ñ—é –∑–∞–∫—Ä–∏—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")
            return False
        
        last_entry_time[symbol] = time.time()
        
        position_value = ORDER_SIZE_USDT * LEVERAGE
        profit_usdt = position_value * tp_percent / 100
        loss_usdt = position_value * sl_percent / 100
        
        telegram_message = (
            f"{'üü¢' if side == 'LONG' else 'üî¥'} <b>–ù–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞!</b>\n\n"
            f"üí∞ <b>–ú–æ–Ω–µ—Ç–∞:</b> {symbol}\n"
            f"üìä <b>–ù–∞–ø—Ä—è–º–æ–∫:</b> {side}\n"
            f"üíµ <b>–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É:</b> {price:.4f} USDT\n\n"
            f"üìà <b>Take Profit:</b> {tp_price} USDT (+{tp_percent:.2f}%)\n"
            f"üíö <b>–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç:</b> ~{profit_usdt:.2f} USDT\n\n"
            f"üìâ <b>Stop Loss:</b> {sl_price} USDT (-{sl_percent:.2f}%)\n"
            f"‚ùå <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–±–∏—Ç–æ–∫:</b> ~{loss_usdt:.2f} USDT\n\n"
            f"üìä <b>–†–æ–∑–º—ñ—Ä:</b> {amount} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\n"
            f"‚ö°Ô∏è <b>–ü–ª–µ—á–µ:</b> {LEVERAGE}x\n"
            f"üíº <b>–û–±—Å—è–≥:</b> {position_value:.2f} USDT\n\n"
            f"üïê {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')} UTC"
        )
        
        send_telegram(telegram_message)
        
        return True
        
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
        if order_opened:
            print(f"{now()} üö® –°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É...")
            close_position(symbol, side)
        return False

def signal(df, symbol=""):
    try:
        last = df.iloc[-1]
        prev = df.iloc[-2]
        
        ema9 = last['EMA9']
        ema21 = last['EMA21']
        ema200 = last['EMA200']
        rsi = last['RSI']
        price = last['close']
        volume = last['volume']
        vol_ema = last['volume_ema']
        
        if pd.isna([ema9, ema21, ema200, rsi, vol_ema]).any():
            return None
        
        print(f"{now()} üîç {symbol}: price={price:.2f} | EMA9={ema9:.2f} EMA21={ema21:.2f} EMA200={ema200:.2f} | RSI={rsi:.1f} | vol={volume:.0f} avgVol={vol_ema:.0f}")
        
        if volume < vol_ema * 1.1:
            print(f"{now()}    ‚îî‚îÄ ‚ùå –ù–∏–∑—å–∫–∏–π –æ–±'—î–º, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return None
        
        in_uptrend = price > ema200
        in_downtrend = price < ema200
        
        if ema9 > ema21 and in_uptrend and last['close'] > last['open'] and rsi > 45 and rsi < 80:
            if prev['close'] < last['close']:
                print(f"{now()}    ‚îî‚îÄ ‚úÖ LONG —Å–∏–≥–Ω–∞–ª!")
                return "LONG"
        
        if ema9 < ema21 and in_downtrend and last['close'] < last['open'] and rsi < 55 and rsi > 20:
            if prev['close'] > last['close']:
                print(f"{now()}    ‚îî‚îÄ ‚úÖ SHORT —Å–∏–≥–Ω–∞–ª!")
                return "SHORT"
        
        return None
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É: {e}")
        return None

def main():
    print(f"\n{'='*60}")
    print(f"ü§ñ Bybit PRO Scalper Bot –∑–∞–ø—É—â–µ–Ω–æ –æ {now()}")
    print(f"{'='*60}")
    print(f"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"  ‚Ä¢ –†–µ–∂–∏–º: {'TESTNET' if TESTNET else 'LIVE'}")
    print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {ORDER_SIZE_USDT} USDT")
    print(f"  ‚Ä¢ –ü–ª–µ—á–µ: {LEVERAGE}x")
    print(f"  ‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {MAX_POSITIONS}")
    print(f"  ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {TIMEFRAME}")
    print(f"  ‚Ä¢ –ú—ñ–Ω. –ø—Ä–æ—Ñ—ñ—Ç: {MIN_PROFIT_PERCENT}%")
    print(f"  ‚Ä¢ –ú—ñ–Ω. –±–∞–ª–∞–Ω—Å: {MIN_BALANCE_USDT} USDT")
    print(f"  ‚Ä¢ Cooldown: {COOLDOWN_SECONDS}—Å")
    print(f"\nüìä –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ñ –¥–ª—è {TIMEFRAME}):")
    print(f"  ‚Ä¢ EMA: 9, 21, 200 (—Ç—Ä–µ–Ω–¥)")
    print(f"  ‚Ä¢ RSI({RSI_WINDOW}) - —à–≤–∏–¥–∫–∏–π –º–æ–º–µ–Ω—Ç—É–º")
    print(f"  ‚Ä¢ ATR({ATR_WINDOW}) - –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å")
    print(f"  ‚Ä¢ Volume EMA(20) - —Ñ—ñ–ª—å—Ç—Ä –æ–±'—î–º—É")
    print(f"\nüéØ PRO —Ñ—É–Ω–∫—Ü—ñ—ó:")
    print(f"  ‚úÖ Exit signals (EMA cross + RSI reversal)")
    print(f"  ‚úÖ PnL tracking (winrate, equity)")
    print(f"  ‚úÖ Cooldown –∑–∞—Ö–∏—Å—Ç")
    print(f"  ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (1m/3m/5m)")
    print(f"{'='*60}\n")
    
    if not API_KEY or not API_SECRET:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: API_KEY —Ç–∞ API_SECRET –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!")
        print("üìù –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env —Ç–∞ –¥–æ–¥–∞–π—Ç–µ:")
        print("   API_KEY=–≤–∞—à_–∫–ª—é—á")
        print("   API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
        return
    
    current_balance = get_balance()
    print(f"{now()} üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} USDT")
    
    if current_balance < MIN_BALANCE_USDT:
        error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ë–∞–ª–∞–Ω—Å: {current_balance:.2f} USDT, –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º: {MIN_BALANCE_USDT} USDT"
        print(error_msg)
        send_telegram(f"üö´ <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞</b>\n\n{error_msg}")
        return
    
    try:
        markets = exchange.fetch_markets()
        symbols = [s['symbol'] for s in markets if s['quote'] == 'USDT' and s.get('type') == 'swap']
        print(f"{now()} üîπ –ó–Ω–∞–π–¥–µ–Ω–æ {len(symbols)} —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä USDT")
        
        if len(symbols) == 0:
            print(f"{now()} ‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API.")
            return
            
    except Exception as e:
        print(f"{now()} ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤: {e}")
        print("‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        return
    
    startup_message = (
        f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n"
        f"{'üî∏ –†–µ–∂–∏–º: TESTNET' if TESTNET else 'üî¥ –†–µ–∂–∏–º: LIVE'}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {current_balance:.2f} USDT\n"
        f"üìä –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {ORDER_SIZE_USDT} USDT\n"
        f"‚ö°Ô∏è –ü–ª–µ—á–µ: {LEVERAGE}x\n"
        f"üìà –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {MAX_POSITIONS}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {TIMEFRAME}\n"
        f"üíö –ú—ñ–Ω. –ø—Ä–æ—Ñ—ñ—Ç: {MIN_PROFIT_PERCENT}%\n"
        f"ü™ô –¢–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä: {len(symbols)}\n\n"
        f"üïê {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')} UTC"
    )
    send_telegram(startup_message)
    
    scan_count = 0
    last_balance_check = time.time()
    last_pnl_report = time.time()
    
    while True:
        try:
            scan_count += 1
            
            if time.time() - last_balance_check > 3600:
                current_balance = get_balance()
                print(f"{now()} üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É: {current_balance:.2f} USDT")
                
                if current_balance < MIN_BALANCE_USDT:
                    warning_msg = f"‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} USDT (–º—ñ–Ω—ñ–º—É–º: {MIN_BALANCE_USDT} USDT)"
                    print(f"{now()} {warning_msg}")
                    send_telegram(f"‚ö†Ô∏è <b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –±–∞–ª–∞–Ω—Å</b>\n\n{warning_msg}")
                
                last_balance_check = time.time()
            
            if time.time() - last_pnl_report > 3600 and pnl_stats["total_trades"] > 0:
                print_pnl_stats()
                last_pnl_report = time.time()
            
            open_positions = get_open_positions()
            
            for pos in open_positions:
                try:
                    pos_symbol = pos.get('symbol')
                    contracts = float(pos.get('contracts', 0))
                    if abs(contracts) == 0:
                        continue
                    
                    pos_side = "LONG" if contracts > 0 else "SHORT"
                    entry_price = float(pos.get('entryPrice', 0))
                    
                    df = fetch_ohlcv(pos_symbol, limit=100)
                    if df is not None and len(df) > 50:
                        df = calculate_indicators(df)
                        if df is not None and exit_signal(df, pos_side, pos_symbol):
                            close_position(pos_symbol, pos_side, "EXIT signal", entry_price)
                            time.sleep(1)
                except Exception:
                    continue
            
            open_positions = get_open_positions()
            
            print(f"\n{now()} üîç –°–∫–∞–Ω #{scan_count} | –ü–æ–∑–∏—Ü—ñ–π: {len(open_positions)}/{MAX_POSITIONS}")
            
            if len(open_positions) >= MAX_POSITIONS:
                print(f"{now()} ‚è∏Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü—ñ–π ({MAX_POSITIONS})")
                time.sleep(60)
                continue
            
            positions_opened = 0
            
            for symbol in symbols:
                if len(open_positions) + positions_opened >= MAX_POSITIONS:
                    break
                    
                if any(p.get('symbol') == symbol for p in open_positions):
                    continue
                
                try:
                    df = fetch_ohlcv(symbol)
                    if df is None or len(df) < 220:
                        continue
                    
                    df = calculate_indicators(df)
                    if df is None:
                        continue
                    
                    sig = signal(df, symbol)
                    if sig:
                        print(f"\n{now()} üéØ –°–∏–≥–Ω–∞–ª {sig} –¥–ª—è {symbol}")
                        if open_position(symbol, sig, df.iloc[-1]['ATR']):
                            positions_opened += 1
                            time.sleep(2)
                        
                except Exception as e:
                    continue
            
            if positions_opened > 0:
                print(f"\n{now()} ‚ú® –í—ñ–¥–∫—Ä–∏—Ç–æ –Ω–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {positions_opened}")
            
            time.sleep(30)
            
        except KeyboardInterrupt:
            print(f"\n\n{now()} üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            break
        except Exception as e:
            print(f"{now()} ‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(60)

if __name__ == "__main__":
    main()
